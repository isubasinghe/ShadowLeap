import org.newdawn.slick.Image;
import org.newdawn.slick.SlickException;
import tile.TileImageBuilder;

import java.io.FileReader;
import java.util.ArrayList;
import java.util.Scanner;

/**
 * LevelBuilder is a class to simplify and abstract
 * the loading of sprites and collide-able objects.
 */
public class LevelBuilder {
    //Store the sprites here
    private ArrayList<Sprite> sprites;

    private static final int L1_GRASS_TOP = 384;
    private static final int L1_GRASS_BOTTOM = 672;

    private static final float L1_WATER_TOP = 48;
    private static final float L1_WATER_BOTTOM = 336;

    private static final float L1_BUS1_OFF = 48;
    private static final float L1_BUS1_SEP = App.TILE_SIZE*6.5f;
    private static final float L1_BUS1_Y = 432;

    private static final float L1_BUS2_OFF = 0;
    private static final float L1_BUS2_SEP = App.TILE_SIZE*5;
    private static final float L1_BUS2_Y = 480;

    private static final float L1_BUS3_OFF = 64;
    private static final float L1_BUS3_SEP = App.TILE_SIZE*12;
    private static final float L1_BUS3_Y = 528;

    private static final float L1_BUS4_OFF = 128;
    private static final float L1_BUS4_SEP = App.TILE_SIZE*5;
    private static final float L1_BUS4_Y = 576;

    private static final float L1_BUS5_OFF = 250;
    private static final float L1_BUS5_SEP = App.TILE_SIZE*6.5f;
    private static final float L1_BUS5_Y = 624;


    public static final int L1_PLAYER_X = 512;
    public static final int L1_PLAYER_Y = 720;


    private LevelBuilder() {
        sprites = new ArrayList<Sprite>();
    }


    /**
     * add a new Sprite to the level
     * @param sprite sprite to add
     * @return a pointer to itself
     */
    private LevelBuilder addSprite(Sprite sprite) {
        sprites.add(sprite);
        // stack sprite additions calls this way, just nice
        // syntactic sugar.
        return this;
    }

    /**
     *
     * @return the level's sprites
     */
    private ArrayList<Sprite> getSprites() {
        return sprites;
    }

    /**
     * Populates the y axis with buses from the given params
     * @param busImage The image of the bus
     * @param busOffset The starting X position
     * @param busSeperation The seperation distance
     * @param busY The Y location
     * @param dir The direction of travel
     */
    private void addBuses(Image busImage, float busOffset, float busSeperation, float busY, int dir) {
        // Iterate through the Y position and add buses seperated by the given
        // busSeperation
        for(float i=busOffset; i < App.SCREEN_WIDTH; i+= busSeperation) {
            Bus bus = new Bus(busImage, i, busY, Bus.BUS_SPEED, dir, true);
            this.addSprite(bus);
        }
    }

    /**
     * Create the sprites for the level 1 of the game.
     * If there are any physics objects (There is, the player,
     * buses and water tiles) we create a bounding box for them.
     * The the bounding boxes are added to the sprites.
     * @return An array of Sprites
     * @throws SlickException An error generated by slick, typically for file not
     *                              found in this case
     */
    public static ArrayList<Sprite> buildLevelOne() throws SlickException{
        // Create a new class for the level builder
        LevelBuilder builder = new LevelBuilder();

        // Batch process the tileset for the grass tiles,
        // this will speed up render time since OpenGL draw calls
        // are minimised. Batch processing is done through
        // making a new image consisting of all the images of
        // similar texture that are static in respect to each other.
        Image grassImage = new TileImageBuilder(App.SCREEN_WIDTH, App.TILE_SIZE)
                .fillFullRect("./assets/grass.png")
                .buildImage();

        // Load the rest of the image used in the game
        Image waterImage = new Image("./assets/water.png");
        Image busImage = new Image("./assets/bus.png");
        Image playerImage = new Image("./assets/frog.png");

        // Create the grass sprites at the given locations
        Sprite grassTop = new Sprite(grassImage, App.SCREEN_WIDTH/2, L1_GRASS_TOP, false);
        Sprite grassBottom = new Sprite(grassImage, App.SCREEN_WIDTH/2, L1_GRASS_BOTTOM, false);

        // Create a new player sprite at the given location
        Sprite player = new Player(playerImage, L1_PLAYER_X, L1_PLAYER_Y, true);


        // Add the sprites to the array of sprites that we return.
        builder.addSprite(grassBottom);
        builder.addSprite(grassTop);

        // Iterate over the area in which the water tiles exists
        for(int i=0; i < App.SCREEN_WIDTH; i+= App.TILE_SIZE) {
            for(float j=L1_WATER_BOTTOM; j > L1_WATER_TOP; j-= App.TILE_SIZE) {
                //Create a new water sprite
                Sprite water = new Sprite(waterImage, i, j, true);
                builder.addSprite(water);
            }
        }

        // Add the buses
        builder.addBuses(busImage, L1_BUS1_OFF, L1_BUS1_SEP, L1_BUS1_Y, Wrappable.DIR_LEFT);
        //builder.addBuses(busImage, L1_BUS2_OFF, L1_BUS2_SEP, L1_BUS2_Y, Wrappable.DIR_RIGHT);
        //builder.addBuses(busImage, L1_BUS3_OFF, L1_BUS3_SEP, L1_BUS3_Y, Wrappable.DIR_LEFT);
        //builder.addBuses(busImage, L1_BUS4_OFF, L1_BUS4_SEP, L1_BUS4_Y, Wrappable.DIR_RIGHT);
        //builder.addBuses(busImage, L1_BUS5_OFF, L1_BUS5_SEP, L1_BUS5_Y, Wrappable.DIR_LEFT);
        Log log = new Log("longlog", L1_BUS2_OFF, L1_BUS2_Y, 0.15f, Wrappable.DIR_RIGHT);
        builder.addSprite(log);
        Bulldozer dozer = new Bulldozer(L1_BUS3_OFF, L1_BUS3_Y, Wrappable.DIR_RIGHT);
        builder.addSprite(dozer);
        Sprite racecar = new Racecar(L1_BUS5_OFF, L1_BUS5_Y, Wrappable.DIR_RIGHT);
        builder.addSprite(racecar);
        Sprite bike = new Bike(L1_BUS4_OFF, L1_BUS4_Y, Wrappable.DIR_RIGHT);
        builder.addSprite(bike);
        // Finally add the sprite for the player
        // this needs to be the last because it
        // needs to draw on top of the other sprites.
        //builder.addSprite(player);

        // Return the sprites for the level.
        return builder.getSprites();
    }

    public static void buildWorldByCSV(String path) throws Exception{
        FileReader fr = new FileReader(path);
        Scanner sc = new Scanner(fr);
        sc.useDelimiter(",");
        while (sc.hasNext()) {
            String info = sc.nextLine();
            String[] data = info.split(",");
            String assetName = data[0];
            int assetX = Integer.parseInt(data[1]);
            int assetY = Integer.parseInt(data[2]);

            System.out.print("|" + assetName + "|" + assetX + "|" + assetY + "|");
            if(data.length == 4) {
                boolean assetDir = Boolean.parseBoolean(data[3]);
                String dir = "LEFT";
                if(assetDir) {
                    dir = "RIGHT";
                }
                System.out.print(dir + "|");
            }

            System.out.println();
        }
        sc.close();
        fr.close();
    }



}
